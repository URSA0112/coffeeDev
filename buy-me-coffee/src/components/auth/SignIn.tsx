"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import { useSignIn, useAuth } from "@clerk/nextjs";
import { toast } from "sonner";
import { useEffect, useState } from "react";

// üß† Form validation - Zod –∞—à–∏–≥–ª–∞–∂ –±–∞–π–Ω–∞
const SignInSchema = z.object({
    identify: z.string().min(1, "–ò-–º—ç–π–ª —ç—Å–≤—ç–ª —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"),
    password: z.string().min(8, "–ù—É—É—Ü “Ø–≥ —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 8 —Ç—ç–º–¥—ç–≥—Ç –±–∞–π—Ö —ë—Å—Ç–æ–π"),
});

export default function SignIn() {
    const router = useRouter();
    const { isSignedIn } = useAuth();
    const { signIn, isLoaded, setActive } = useSignIn();
    const [error, setError] = useState<string>("");

    // üõ†Ô∏è Form –±“Ø—Ä–¥“Ø“Ø–ª—ç–ª—Ç
    const form = useForm<z.infer<typeof SignInSchema>>({
        resolver: zodResolver(SignInSchema),
        defaultValues: {
            identify: "",
            password: "",
        },
    });

    // üöÄ Form submit —Ö–∏–π—Ö “Ø–µ–¥
    const onSubmit = async (values: z.infer<typeof SignInSchema>) => {
        if (!isLoaded) return; // Clerk –±“Ø—Ä—ç–Ω –∞—á–∞–∞–ª–ª–∞–∂ –¥—É—É—Å–∞–∞–≥“Ø–π –±–æ–ª –±—É—Ü–∞–∞–Ω–∞

        try {
            const result = await signIn.create({
                identifier: values.identify, // ‚úâÔ∏è –ò-–º—ç–π–ª —ç—Å–≤—ç–ª —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä—ç—ç—Ä –Ω—ç–≤—Ç—Ä—ç—Ö
                password: values.password,
            });

            if (result.status === "complete") {
                await setActive({ session: result.createdSessionId }); // üõ°Ô∏è Session –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª–Ω—ç
                toast.success("‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç!");
                router.push("/dashboard"); // üéØ Dashboard —Ä—É—É —á–∏–≥–ª“Ø“Ø–ª–Ω—ç
            } else {
                toast.info("‚è≥ –ù—ç–º—ç–ª—Ç –∞–ª—Ö–º—É—É–¥—ã–≥ –≥“Ø–π—Ü—ç—ç–Ω—ç “Ø“Ø");
            }
        } catch (err: any) {
            const errorMessage = err?.errors?.[0]?.message || "–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.";
            console.error("SignIn error:", errorMessage);
            setError(errorMessage);
            toast.error(errorMessage); // üî• –ê–ª–¥–∞–∞–Ω—ã popup
        }
    };

    // üî• –•—ç—Ä—ç–≤ –∞–ª—å —Ö—ç–¥–∏–π–Ω –Ω—ç–≤—Ç—ç—Ä—Å—ç–Ω –±–æ–ª —à—É—É–¥ dashboard —Ä—É—É –∏–ª–≥—ç—ç–Ω—ç
    useEffect(() => {
        if (isSignedIn) {
            router.push("/dashboard");
        }
    }, [isSignedIn, router]);

    return (
        <div className="py-10 px-20 w-full h-screen">
            <div className="h-full w-full px-32 flex flex-col gap-4 justify-center items-center">
                <div className="w-[400px]">
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                            <div className="flex flex-col gap-2">
                                {/* ‚úâÔ∏è –ò-–º—ç–π–ª —ç—Å–≤—ç–ª –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–∞—Ö —Ö—ç—Å—ç–≥ */}
                                <FormField
                                    control={form.control}
                                    name="identify"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel className="text-[14px] text-black">Email —ç—Å–≤—ç–ª Username</FormLabel>
                                            <FormControl>
                                                <Input
                                                    placeholder="Email —ç—Å–≤—ç–ª username –±–∏—á–Ω—ç “Ø“Ø"
                                                    {...field}
                                                    className="border outline-none focus-within:outline-none"
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                                {/* üîí –ù—É—É—Ü “Ø–≥ –æ—Ä—É—É–ª–∞—Ö —Ö—ç—Å—ç–≥ */}
                                <FormField
                                    control={form.control}
                                    name="password"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel className="text-[14px] text-black">Password</FormLabel>
                                            <FormControl>
                                                <Input
                                                    type="password"
                                                    placeholder="–ù—É—É—Ü “Ø–≥ –±–∏—á–Ω—ç “Ø“Ø"
                                                    {...field}
                                                    className="border outline-none focus-within:outline-none"
                                                />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>

                            {/* üñ±Ô∏è Submit —Ç–æ–≤—á */}
                            <Button type="submit" className="w-full rounded-md bg-[#18181b]">
                                Submit
                            </Button>

                            {/* üîó –ë“Ø—Ä—Ç–≥—ç–ª –±–∞–π—Ö–≥“Ø–π –±–æ–ª –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö –ª–∏–Ω–∫ */}
                            <div className="flex gap-2 my-3 mx-1">
                                <p>–ë“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π —é—É?</p>
                                <a href="/signUp" className="text-rose-400">
                                    –ë“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö
                                </a>
                            </div>
                        </form>
                    </Form>
                </div>
                {/* ‚ö†Ô∏è –ê–ª–¥–∞–∞–Ω—ã –º–µ—Å—Å–µ–∂ */}
                {error && (
                    <div className="text-red-500 text-sm text-center">{error}</div>
                )}
            </div>
        </div>
    );
}